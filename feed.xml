<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-12-16T16:23:06+03:00</updated><id>/feed.xml</id><title type="html">TomDev24 Blog</title><subtitle>sic parvis magna</subtitle><author><name>TomDev</name><email>tommog2499@gmail.com</email></author><entry xml:lang="ru"><title type="html">‘Postman не нужен, родной’ или используем cURL для API запросов</title><link href="/programming/2022/02/01/curl_as_postman_ru.html" rel="alternate" type="text/html" title="‘Postman не нужен, родной’ или используем cURL для API запросов" /><published>2022-02-01T00:00:00+03:00</published><updated>2022-02-01T00:00:00+03:00</updated><id>/programming/2022/02/01/curl_as_postman_ru</id><content type="html" xml:base="/programming/2022/02/01/curl_as_postman_ru.html"><![CDATA[<p>Давайте рассмотрим, как с помощью cURL можно делать <code class="language-plaintext highlighter-rouge">GET, POST, PUT, PATCH, and DELETE</code> http запросы.
Для примеров будем использовать <a href="https://jsonplaceholder.typicode.com">jsonplaceholder</a></p>

<h3 id="флаги-curl">Флаги cURL</h3>

<ul>
  <li>-X –request - Метод запроса</li>
  <li>-d –data - Отправить определенные данные</li>
  <li>-H –header - Заголовок HTTP запроса</li>
  <li>-i –include - Отобразить заголовки ответа</li>
</ul>

<h3 id="get">GET</h3>

<p>Get запросы довольно тривиальны. Следущие два запроса совершенно индентичны:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl https://jsonplaceholder.typicode.com/posts
<span class="nv">$ </span>curl <span class="nt">-X</span> GET https://jsonplaceholder.typicode.com/posts
</code></pre></div></div>

<h3 id="post">POST</h3>

<p>С помощью флага -X указываем POST запрос, а флаг -d указывает данные. Мы можем отправлять данные как закадированные в url(первый пример),
так и json данные(второй пример).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> POST <span class="nt">-d</span> <span class="s2">"userId=5&amp;title=Stuff and Things&amp;body=An amazing blog post about both stuff and things."</span> https://jsonplaceholder.typicode.com/posts
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"userId": 5, "title": "Stuff and Things", "body": "An amazing blog post about both stuff and things."}'</span>
https://jsonplaceholder.typicode.com/posts
</code></pre></div></div>

<p>Как видим для JSON запросов нужно указывать заголовок с помощью флага -H.</p>

<h3 id="put">PUT</h3>

<p>Как мы помним, PUT позволяет нам обновлять запись, при это нам всегда нужно указывать запись целиком в теле, а не определенное ее поле.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> PUT <span class="nt">-d</span> <span class="s2">"userId=1&amp;title=Something else&amp;body=A new body"</span> https://jsonplaceholder.typicode.com/posts/1
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> PUT <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"userId": 1, "title": "Something else", "body": "A new body"}'</span> https://jsonplaceholder.typicode.com/posts/1
</code></pre></div></div>

<h3 id="patch">PATCH</h3>

<p>В отличие от PUT, PATCH не требует от нас указывать всю запись целиком, а лишь то поле, которое мы хотим изменить</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> PATCH <span class="nt">-d</span> <span class="s2">"title='Only change the title'"</span> https://jsonplaceholder.typicode.com/posts/1
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> PATCH <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"title": "Only change the title"}'</span> https://jsonplaceholder.typicode.com/posts/1
</code></pre></div></div>

<h3 id="delete">DELETE</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-X</span> DELETE https://jsonplaceholder.typicode.com/posts/1
</code></pre></div></div>

<h3 id="aутентификация">Aутентификация</h3>

<p>В зависимости от метода авторизации в API, мы можем указывать данные аутентификации в заголовке:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer &lt;JWT_TOKEN&gt;"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"x-jwt-assertion: &lt;JWT_TOKEN&gt;"</span> <span class="se">\</span>
  <span class="nt">-X</span> POST <span class="se">\</span>
  <span class="nt">-d</span>  <span class="s1">'{"key1" : "value1", "key2" : "value2"}'</span> <span class="se">\</span>
  https://example.com/
</code></pre></div></div>

<h3 id="vim-как-окружение-для-тестирования-api">Vim, как окружение для тестирования API</h3>

<p>Что самое прекрасное в cURL запросах, так это то что мы можем легко их поместить в текстовый файл:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//req.txt пример текстового файла с запросами
curl https://jsonplaceholder.typicode.com/posts
curl https://jsonplaceholder.typicode.com/users
curl https://jsonplaceholder.typicode.com/posts/1

curl \
    -X PUT \
    -H "Content-Type: application/json" -d \
    '{"userId": 1, "title": "Something else", "body": "A new body"}' https://jsonplaceholder.typicode.com/posts/1

</code></pre></div></div>

<p>И уже в vim наводя курсор на нужный запроc, выполнять его <code class="language-plaintext highlighter-rouge">:.w !bash</code>. И даже выводить результат в другое окно vim <code class="language-plaintext highlighter-rouge">:.w !bash | vi -</code><br />
Ну и вишенка на торте: можно выполнять запросы, которые занимают несколько строк, для этого нужно выделить эти строки в Visual Mode и затем выполнить</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:'&lt;,'&gt;w !bash
</code></pre></div></div>

<p>Ну и конечно, ничто не мешает нам открыть этот файл в том же Python, и по каждой строчке делать запрос, и далее обрабатывать результат и возможно 
сравнивать его с чем то.</p>

<h3 id="как-редактивировать-curl-запросы-прямо-в-терминале">Как редактивировать cURL запросы прямо в терминале</h3>

<p>В Linux есть полезная команда <code class="language-plaintext highlighter-rouge">fc</code>, позволяющая редактивировать последнюю выполненную команду. При этом, редактивироваться сообщение будет в редакторе по
умолчанию, указанный в .bashrc <code class="language-plaintext highlighter-rouge">export EDITOR=nvim</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">fc</span>
</code></pre></div></div>

<p>При закрытие нашего редактора, команда будет автоматически выполнена.</p>

<p>Если мы не хотим выполнять команду/запрос сразу, а вначале его отредактвировать. То мы можем перейти в начало ввода команды <code class="language-plaintext highlighter-rouge">ctrl+a</code> и поставить <code class="language-plaintext highlighter-rouge">#</code>, что
сделает нашу команду коментарием. Ну и после соотвестенно мы можем выполнить <code class="language-plaintext highlighter-rouge">fc</code> и отредактивировать команду.</p>

<h3 id="заключение">Заключение</h3>

<p>Postman часто используют для автоматизации тестирования API. Но как мы видим, возможность делать запросы через cURL и возможность сохранения запросов
в текстовых файлах (которые можно легко выполнить в vim, или python/bash скрипте), позволяют нам гибко настраивать систему тестирования, без необходимости
открывать требовательное приложение Postman, которое на минуточку написано на Electron, со всеми вытекающими отсюда последствиями.</p>

<h3 id="источники">Источники</h3>

<ul>
  <li>https://github.com/curl/curl/blob/master/docs/MANUAL.md</li>
  <li>https://man7.org/linux/man-pages/man1/curl.1.html</li>
  <li>https://dev.to/zaerald/using-vim-as-your-shell-command-line-scratch-1lcl</li>
</ul>]]></content><author><name>TomDev</name><email>tommog2499@gmail.com</email></author><category term="programming" /><summary type="html"><![CDATA[Давайте рассмотрим, как с помощью cURL можно делать GET, POST, PUT, PATCH, and DELETE http запросы. Для примеров будем использовать jsonplaceholder]]></summary></entry><entry xml:lang="ru"><title type="html">Псевдо 3D с помощью Raycasting</title><link href="/programming/2021/01/20/raycast_ru.html" rel="alternate" type="text/html" title="Псевдо 3D с помощью Raycasting" /><published>2021-01-20T00:00:00+03:00</published><updated>2021-01-20T00:00:00+03:00</updated><id>/programming/2021/01/20/raycast_ru</id><content type="html" xml:base="/programming/2021/01/20/raycast_ru.html"><![CDATA[<p>Сегодня мы рассмотрим алгоритм, который (возможно) впервые был использован в игре Wolfenstein 3D 1992 года.</p>

<p>Ray casting можно перевести как “бросание лучей” и это на самом деле достаточно хорошее описание. По сути, весь
алгоритм сводится к тому, что мы бросаем N-ое количество лучей и на основание расстояния каждого луча отображаем вертикальную линию.</p>

<p>Итак, наши действующие лица:</p>
<ul>
  <li>2D плоскоcть (карта)</li>
  <li>Игрок который может передвигаться по 2D плоскоcти</li>
</ul>

<p>Для простоты, карту будем представлять в виде 2-мерного массива 10 на 10 (хотя есть варианты по оптимальнее) где 1 и 0 означают:<br />
1 - ячейка заполнена
0 - пустое место</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">world_map</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Размер “ячейки” возьмем за 80 пикселей (она у нас квадратная). Так как у нас карта 10x10 ячеек, удобно сделать так, чтобы размер экран был
800x800(то есть мы просто домножили на размер ячейки)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">screen_w</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">800</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">screen_h</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">800</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">fps</span><span class="sh">'</span> <span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">tile</span><span class="sh">'</span> <span class="p">:</span> <span class="mi">80</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Базовые вещи, связанные с pygame я опускаю. Cоздав игровой цикл, поместим внутри него функцию, которая будет отрисовывать карту</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">draw_map</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">world_map</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">world_map</span><span class="p">[</span><span class="n">y</span><span class="p">])):</span>
            <span class="k">if</span> <span class="n">world_map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="nf">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">colors</span><span class="p">[</span><span class="sh">'</span><span class="s">grey</span><span class="sh">'</span><span class="p">],</span> \
                    <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">tile</span><span class="sh">'</span><span class="p">],</span> <span class="n">y</span> <span class="o">*</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">tile</span><span class="sh">'</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">tile</span><span class="sh">'</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">tile</span><span class="sh">'</span><span class="p">]),</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>TomDev</name><email>tommog2499@gmail.com</email></author><category term="programming" /><summary type="html"><![CDATA[Сегодня мы рассмотрим алгоритм, который (возможно) впервые был использован в игре Wolfenstein 3D 1992 года.]]></summary></entry></feed>