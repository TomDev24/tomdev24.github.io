---
layout: post
title:  "Псевдо 3D с помощью Raycasting"
categories: programming
lang: ru
ref: raycast
---


Сегодня мы рассмотрим алгоритм, который (возможно) впервые был использован в игре Wolfenstein 3D 1992 года.

Ray casting можно перевести как "бросание лучей" и это на самом деле достаточно хорошее описание. По сути, весь
алгоритм сводится к тому, что мы бросаем N-ое количество лучей и на основание расстояния каждого луча отображаем вертикальную линию.

Итак, наши действующие лица:
* 2D плоскоcть (карта)
* Игрок который может передвигаться по 2D плоскоcти

Для простоты, карту будем представлять в виде 2-мерного массива 10 на 10 (хотя есть варианты по оптимальнее) где 1 и 0 означают:  
1 - ячейка заполнена
0 - пустое место
```python
world_map = [
    [1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,0,0,1,0,0,1,0,0,1],
    [1,0,0,1,0,0,1,0,0,1],
    [1,0,0,1,0,0,1,0,0,1],
    [1,0,0,1,0,0,1,0,0,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1]
]
```

Размер "ячейки" возьмем за 80 пикселей (она у нас квадратная). Так как у нас карта 10x10 ячеек, удобно сделать так, чтобы размер экран был
800x800(то есть мы просто домножили на размер ячейки)

```python
config = {
    "screen_w" : 800,
    "screen_h" : 800,
    'fps' : 60,
    'tile' : 80
}
```

Базовые вещи, связанные с pygame я опускаю. Cоздав игровой цикл, поместим внутри него функцию, которая будет отрисовывать карту

```python
def draw_map():
    for y in range(len(world_map)):
        for x in range(len(world_map[y])):
            if world_map[y][x] == 1:
                pygame.draw.rect(screen, colors['grey'], \
                    (x * config['tile'], y * config['tile'], config['tile'], config['tile']), 2)
```

